#!/bin/sh
# Convenience wrapper for easily viewing/setting options that
# the project's CMake scripts will recognize.

# check for `cmake` command
type cmake > /dev/null 2>&1 || {
    echo "\
This package requires CMake, please install it first, then you may
use this configure script to access CMake equivalent functionality." >&2;
    exit 1;
}

command="$0 $*"
sourcedir="$( cd "$( dirname "$0" )" && pwd )"
usage="\
Usage: $0 [OPTION]... [VAR=VALUE]...

  Build Options:
    --no-cppa                   exclude benchmarks for libcppa
    --no-scala                  exclude benchmarks for Scala
    --no-erlang                 exclude benchmarks for Erlang
    --no-go                     exclude benchmarks for Go
    --no-theron                 exclude benchmarks for Theron

  Compiler Options:
    --with-clang=PATH           path to clang++ executable
    --with-gcc=PATH             path to g++ executable
    --with-scalac=PATH          path to scala compiler
    --with-erlc=PATH            path to erlang compiler

  Required Packages in Non-Standard Locations:
    --with-libcppa=PATH         path to libcppa install root
    --with-boost=PATH           path to Boost install root
    --with-theron=PATH          path to Theron install root

  Influential Environment Variables (only on first invocation
  per build directory):
    CXX                         C++ compiler command
    CXXFLAGS                    C++ compiler flags
"


# Appends a CMake cache entry definition to the CMakeCacheEntries variable.
#   $1 is the cache entry variable name
#   $2 is the cache entry variable type
#   $3 is the cache entry variable value
append_cache_entry ()
{
    CMakeCacheEntries="$CMakeCacheEntries -D $1:$2=$3"
}

# Creates a build directory via CMake.
#   $1 is the path to a compiler executable.
#   $2 is the suffix of the build directory.
#   $3 is the executable output path.
#   $4 is the library output path.
#   $5 is the CMake generator.
configure ()
{
    CMakeCacheEntries=$CMakeDefaultCache

    if [ -n "$1" ]; then
        append_cache_entry CMAKE_CXX_COMPILER FILEPATH $1
    fi

    if [ -n "$2" ]; then
        workdir="$builddir-$2"
    else
        workdir=$builddir
    fi
    workdirs="$workdirs $workdir"

    if [ -n "$3" ]; then
        append_cache_entry EXECUTABLE_OUTPUT_PATH PATH $3
    else
        append_cache_entry EXECUTABLE_OUTPUT_PATH PATH "/bin"
    fi

    if [ -d $workdir ]; then
        # If a build directory exists, check if it has a CMake cache.
        if [ -f $workdir/CMakeCache.txt ]; then
            # If the CMake cache exists, delete it so that this configuration
            # is not tainted by a previous one.
            rm -f $workdir/CMakeCache.txt
        fi
    else
        mkdir -p $workdir
    fi

    cd $workdir

    if [ -n "$5" ]; then
        cmake -G "$5" $CMakeCacheEntries $sourcedir
    else
        cmake $CMakeCacheEntries $sourcedir
    fi

    echo "# This is the command used to configure this build" > config.status
    echo $command >> config.status
    chmod u+x config.status
}

# Set defaults.
ExcludedBenchmarks=""
builddir="$sourcedir/build"
CMakeCacheEntries=""
append_cache_entry CMAKE_BUILD_TYPE            STRING RelWithDebInfo
append_cache_entry CMAKE_INSTALL_PREFIX        PATH   /usr/local

# Parse arguments.
while [ $# -ne 0 ]; do
    case "$1" in
        -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
        *) optarg= ;;
    esac

    case "$1" in
        --help|-h)
            echo "${usage}" 1>&2
            exit 1
            ;;
        --with-boost=*)
            append_cache_entry BOOST_ROOT PATH $optarg
            ;;
        --with-clang=*)
            clang=$optarg
            ;;
        --with-gcc=*)
            gcc=$optarg
            ;;
        --with-theron=*)
            append_cache_entry THERON_ROOT PATH $optarg
            ;;
        --no-cppa)
            ExcludedBenchmarks="cppa_$ExcludedBenchmarks"
            ;;
        --no-theron)
            ExcludedBenchmarks="theron_$ExcludedBenchmarks"
            ;;
        --no-scala)
            ExcludedBenchmarks="scala_$ExcludedBenchmarks"
            ;;
        --no-erlang)
            ExcludedBenchmarks="erlang_$ExcludedBenchmarks"
            ;;
        --no-go)
            ExcludedBenchmarks="golang_$ExcludedBenchmarks"
            ;;
        *)
            echo "Invalid option '$1'.  Try $0 --help to see available options."
            exit 1
            ;;
    esac
    shift
done

append_cache_entry DISABLED_BENCHMARKS STRING "$ExcludedBenchmarks"

# At this point we save the global CMake variables so that configure() can
# later use them.
CMakeDefaultCache=$CMakeCacheEntries

# Prefer Clang to GCC.
if [ -n "$clang" ]; then
    compiler=$clang
elif [ -n "$gcc" ]; then
    compiler=$gcc
fi

configure $compiler "" $bindir $libdir $CMakeGenerator

printf "DIRS := %s\n\n" "$workdirs" > $sourcedir/Makefile
makefile=$(cat <<'EOT'
all:
	$(MAKE) -C build $@ || exit

clean:
	$(MAKE) -C build $@

.PHONY: all clean
EOT
)

echo "$makefile" >> $sourcedir/Makefile
